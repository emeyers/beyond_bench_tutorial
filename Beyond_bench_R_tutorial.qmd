---
title: "Beyond the bench R tutorial"
format: html
editor: source
---



The following is a Quarto document that illustrates how to do a few basic data
analyses in R.

[Quarto](https://quarto.org/) is an open-source scientific publishing system
that allows users to create documents, presentations, and websites that contain
written text, code, and visualizations.

This Quarto document covers the following topics:  

 - R basics (which we will like go through in an R script)  
 - Data visualization using ggplot  
 - Basic hypothesis tests  


Please follow along as we go through the material!



### Getting started

Before we start, please run the following code once to install the packages we will need by pressing the green play buttong

```{r setup, eval=FALSE}

install.packages("palmerpenguins")
install.packages("ggplot2")
install.packages("tidyr")
install.packages("dplyr")


```



\newline




# Part 1: R Basics


Let's start by going through some of the basic syntax of R.




### 1.1 Mathematical operations

As you might expect, R can be used to do basic mathematical operations. 


```{r basic_arithmetic}




```





### 1.2 Storing results in objects


We can store results in "objects" using the assignment operator `<-`. 


```{r basic_assignment}







```





### 1.3 Numeric, string and Boolean data types

R has a few basic data types. The most common ones are numeric, string and
Boolean values. We can check what type of value an object is holding using the
`class()` function.


```{r basic_data_types}









```





# 1.4 Functions 

We can also apply functions to values (and values stored in objects). 

To get help on a function we can use the syntax `? function_name`.

We can also add comments (which is notes that are not executed) using the `#` symbol. 



```{r basic_functions}











```





### 1.5 Vectors 

Vectors are ordered sequences of numbers or letter. 

We use the `c()` function to create vectors.

We can access elements of vectors using `[]` brackets. 

Functions can also be applied to vectors.


```{r basic_vectors}


# create a few vectors 




# One can access elements of a vector using square brackets []



# One can test which elements are greater than a value




# One can also apply functions to vectors





```




### 1.6 Data frames

Data frames are a type of object in R that are used to store tabular data. 

We can extract columns a column from a data frame as a vector using the `$` operator.

As a motivating example, let's look at data on penguins from the Palmer Penguin
dataset.


![Penguins](https://c.ndtvimg.com/2025-04/red2kkf8_penguin-memes_625x300_04_April_25.jpeg)



```{r load_packages}

#install.packages("palmerpenguins")

library(palmerpenguins)

penguins


# Get the mean flipper length



# Get the number of penguins of different species



```







\newline



# Part 2:  Data visualization using ggplot


The ggplot2 library was created by Hadley Wickham. It is based on Leland
Wilkinson's "grammar of graphics" where graphics are created from a combination
of basic visual elements.

A few resources to learn more about ggplot are: 

- [R for Data Science](https://r4ds.hadley.nz/)
- [The ggplot cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)


Let's now visualize some of the penguins data using the ggplot2 package! 



### Part 2.1 Visualzing a single quatitative variables

As you recall from last week's talk, we can visualize a single quantitative 
variable using histograms, boxplots and violin plots (among other types of plots). 


Let's explore this by visualizing the bill length (`bill_length_mm`) of the
penguins in the Palmer dataset.



```{r ggplot_single_variable, warning=FALSE}

# install.packages(ggplot2)

library(ggplot2)


# Histogram, density plot, boxplot and violin plot









# Side-by-side box/violin plots









```




### Part 2.2 Visualizing a single categorical variable

As you recall, we can visualize a single categorical variable using a bar plot.


```{r ggplot_single_categorical_variable}






```




### Part 2.3 Visualizing two quantitative variables

As I'm sure you know, we can visualize two quantitative variables using a
scatter plot. We can also use ggplot to map on other visualize properties to the
points in the scatter plot, such as color, size and shape.


```{r ggplot_two_variables}









```



\newline






# Part 3: Basic hypothesis tests

In this section we will cover a few basic hypothesis tests. As motivation, we
will focus on figures 6D, and 6F from a paper by Smarduch et al, (2025) which 
were analyses that Ece suggested we cover. The original paper can be found at: https://www.embopress.org/doi/full/10.1038/s44318-025-00370-y



![Figure 6 from Smarduch et al. In (D, E), P-values from a t-test between the two groups with N=3 independent experiments are indicated as P=0.0009 an P=0.0041, respectively. In (F), P-values from one-way ANOVA between the indicated groups with N=3 independent experiments are indicated as P<0.0001, or not significant (n.s.) from left to right as P=0.9998, P=0.9999, P=0.9999.  ](https://www.embopress.org/cms/10.1038/s44318-025-00370-y/asset/e1c0af33-6318-414d-aff6-9b2fc422835a/assets/graphic/44318_2025_370_fig6_html.png)



### Part 3.1: The data

To analyze the data, I started by doing a little manual data cleaning in excel
to make the data a little more "tidy". I then saved this data in a .csv file.

Let's view the data in Figure 6D.


```{r fig6d_data, warning = FALSE}

fig6d <- read.csv("fig6d.csv")

fig6d


```




### Part 3:2 Visualzing the data

We can visualize the data by convering it from "wide" format to a "long" format
using the `tidyr` `pivot_longer()` function. Once it is it long format, we can
visualize the data using ggplot.


```{r fig6d_visualization}

# install.packages("tidyr")

library(tidyr)


# converting the data to "long" format for plotting purposes
fig6d_long <- tidyr::pivot_longer(fig6d, 
                                  cols = -Experiment, 
                                  names_to = "Condition", 
                                  values_to = "Value") 








```




### Part 3:3  Replicating the t-test

Let's now try to replicate the t-test that was used in the paper to compare the
means of the two groups compare the Control and Reversine groups.

The paper reported the p-value as 0.0009. Let's see if we replicate this...


```{r}

# Independent samples t-test


# Are the measurements paired? 


```









### Part 3:4  Figure 6F analysis

Let's now look at the data in Figure 6F. The code below loads the data and
converts it to a long format which will be useful for visualization and
analysis.


```{r}

fig6f <- read.csv("fig6f.csv")

names(fig6f) <- c("experiment", "control", "diABZI", "no_micronuclei", "cGAS-_micronuclei", "cGAS+_micronuclei")

fig5f_long <- fig6f |> 
  pivot_longer(cols = -experiment, names_to = "Condition", values_to = "Value") 

fig5f_long

```




### Part 3:5 Visualizing the data in figure 6F

To start the analysis of figure 6F, let's visualize the data.


```{r}






```




### Part 3:6  Replicating the ANOVA


Let's now try to replicate the ANOVA that was used in the paper to compare the
means of the four groups (we will leave aside whether this is the most
appropriate analysis to do for this data).

We can also use the `TukeyHSD()` function to do a post-hoc test to see which
groups are significantly different from each other which is what appears to have
been done in the paper.

From figure caption: P-values from one-way ANOVA between the indicated groups
with N=3 independent experiments are indicated as p < 0.0001, or not significant
(n.s.) from left to right as P=0.9998, P=0.9999, P=0.9999. Let's see if we can
replicate this...


```{r}







```





